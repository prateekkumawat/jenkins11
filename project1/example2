pipeline { 
  agent {
    // using agent manchine call by label  
    label 'ciserver' 
  }
  options {
    // Timeout counter starts AFTER agent is allocated
    timeout(time: 60, unit: 'SECONDS')
  } 
  // environment { 
  //   CONTAINERIMAGE = 'ngnix:latest'
  //   }

  parameters {
      string(name: 'ContainerName', defaultValue: 'serverci', description: 'Define Container name')

      string(name: 'ContainerPort', defaultValue: '8080', description: 'Define Container Expose Port')

      choice(name: 'CONTAINERIMAGE', choices: ['httpd', 'nginx'], description: 'Pick Your Container Image')
  }

  stages {
    stage("PullImages"){
        steps{
            sh "docker pull ${params.CONTAINERIMAGE}:latest"
        }
    }

    stage('KillOldContainer') { 
        steps{
            sh "docker rm -f ${params.ContainerName}"
        }
    }

    stage("BuildContainer"){
        steps{
            sh "docker run -dit --name ${params.ContainerName} -p ${params.ContainerPort}:80 ${params.CONTAINERIMAGE}:latest"
        }
    }
  }  
}